pipeline.Add(new BsonDocument("$match", new BsonDocument("$or", new BsonArray
{
    new BsonDocument("Matchfield", "ABCD"),  		// Matches "ABCD"
    new BsonDocument("Matchfield", BsonNull.Value)  // Matches null
})));

db.createView(
   "newView1",  // Name of the new view
   "view1",     // Base view
   [
      { 
         $unionWith: { 
            coll: "coll1", 
            pipeline: [
               {
                  $match: {
                     uniqueField: { 
                        $nin: db.view1.distinct("uniqueField") 
                     }
                  }
               }
            ]
         }
      }
   ]
);

-------------------
using System;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using NUnit.Framework;

[TestFixture]
public class LocalStorageTest
{
    private IWebDriver driver;

    [SetUp]
    public void Setup()
    {
        driver = new ChromeDriver();
        driver.Navigate().GoToUrl("https://example.com"); // Replace with your URL
    }

    [Test]
    public void GetLocalStorageValue()
    {
        IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
        
        // Replace 'yourKey' with the actual key stored in localStorage
        string value = (string)js.ExecuteScript("return localStorage.getItem('yourKey');");
        
        Console.WriteLine("LocalStorage Value: " + value);
        Assert.IsNotNull(value, "Value should not be null");
    }

    [TearDown]
    public void Teardown()
    {
        driver.Quit();
    }
}
--------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;

class Program
{
    static void Main()
    {
        List<string> data = new List<string> { "Apple", "Banana", "Cherry" };

        string json = JsonSerializer.Serialize(data, new JsonSerializerOptions { WriteIndented = true });

        File.WriteAllText("data.json", json);

        Console.WriteLine("JSON file saved successfully.");
    }
}
-------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.IO;
using Newtonsoft.Json;

class Program
{
    static void Main()
    {
        List<string> data = new List<string> { "Apple", "Banana", "Cherry" };

        string json = JsonConvert.SerializeObject(data, Formatting.Indented);

        File.WriteAllText("data.json", json);

        Console.WriteLine("JSON file saved successfully.");
    }
}
